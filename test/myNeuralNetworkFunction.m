function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 22-Jan-2022 15:49:24.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx3 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-20.791384;-21.238646;-1.969983];
x1_step1.gain = [0.0546795257600987;0.0599134017682182;0.49373463096669];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.9830280439298286765;-3.1086350413328385223;1.7491275264080980989;-0.74731306893923732382;-1.0729377958017227712;0.1125132240330751765;-0.52747045559723981789;1.4757321972731116677;0.55343828406413242416;2.8425078483407864027];
IW1_1 = [1.9757281394317640633 -2.0958037764596584296 0.95013175265196281316;1.1380226822970762601 1.446807560845640106 -1.5444052189548340692;-1.8989491500395054846 1.900976286767542156 1.4229460616179308019;2.8097065974047468195 2.1774086731301585118 -0.058269831171651229051;6.7598299562337160751 6.0816700665487104516 0.61210102383263076398;-2.3525147955652241372 -0.45630885155691519595 3.1784186140565044987;-2.1208786946257429662 -0.78248259621325888524 2.6961657787878028358;0.33045234471863299541 2.6130581412447497769 -0.96377196849299606729;2.3972050360810870373 1.4226987146138359019 0.97333217042249930984;2.1256001284829166842 1.8427181844181417247 -1.3853183007699827467];

% Layer 2
b2 = 0.57156542565010071133;
LW2_1 = [-0.20498641796378094804 -0.90811644688217940669 -0.3963621915091530834 3.1796682330679497674 -2.9192457712749129151 0.57417085312666338304 -0.31078494191808808678 -0.080494724447488147367 0.077582394877906718511 -0.50408670675405620187];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
